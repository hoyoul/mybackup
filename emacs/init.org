#+PROPERTY: header-args :tangle yes
* basic necessary settings
** meta key settings
 #+begin_src emacs-lisp
   (setq ns-command-modifier 'meta)
 #+end_src
 
** package setting
 #+begin_src emacs-lisp
     ;; Initialize package sources
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                            ("elpa" . "https://elpa.gnu.org/packages/")))

   (package-initialize)
   
   (unless package-archive-contents
     (package-refresh-contents))

   ;; Initialize use-package on non-Linux platforms
   (unless (package-installed-p 'use-package)
     (package-install 'use-package))

   (add-to-list 'load-path "/Users/fregeholy/.emacs.d/lisp/")

   (require 'use-package)
   (setq use-package-always-ensure t)

   (use-package auto-package-update
     :custom
     (auto-package-update-interval 7)
     (auto-package-update-prompt-before-update t)
     (auto-package-update-hide-results t)
     :config
     (auto-package-update-maybe)
     (auto-package-update-at-time "09:00"))

   (use-package dash
     :ensure t)
   (eval-when-compile
     (require 'cl))
   (setq auto-save-default nil)
   ;; Îß§Î≤à Î≤ÑÌçº ÏÑ§Ï†ïÏãú Ï†ÄÏû•ÌïòÎäîÍ≤ÉÏùÑ disable
   (setq-default buffer-save-without-query nil)
 #+end_src  
** exec-path
 #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      )
   (when (memq window-system '(mac ns x))
     (setq exec-path-from-shell-arguments nil)
     (exec-path-from-shell-initialize))
    ;; for eshell
    (defun eshell-mode-hook-func ()
      ;; (setq eshell-path-env (concat "/usr/local/bin:" eshell-path-env))
      (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
      (define-key eshell-mode-map (kbd "M-s") 'other-window-or-split))

    (add-hook 'eshell-mode-hook 'eshell-mode-hook-func)

    ;; (when (daemonp)
    ;;   (exec-path-from-shell-initialize))
 #+END_SRC
** org and Org babel tangle
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-startup-indented t)
    (setq org-adapt-indentation t)
    )

  (defun holy/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/init.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'holy/org-babel-tangle-config)))
#+end_src
** ls support dired
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/usr/local/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))
#+END_SRC
* basic settings
** "yes or no" to "y or n"
 #+BEGIN_SRC emacs-lisp
 (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
** emacsÏÑ§Ï†ïÌååÏùºÍ≥º elfeed ÏÑ§Ï†ïÌååÏùº Î∞îÎ°ú Î≥¥Í≤å ÌïòÎäî Ìï®Ïàò(made it by myself)
#+BEGIN_SRC emacs-lisp
  (defun show-emacs-conf()
    (interactive)
    (find-file "~/.emacs.d/init.org"))
 #+END_SRC

** personal info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Holy Frege")
  (setq user-mail-address "hoyoul.park@gmail.com")
#+END_SRC

** default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC
** paragraph setting
#+BEGIN_SRC emacs-lisp
(setq paragraph-start "\f\\|[ \t]*$\\|[ \t]*[-+*] ")
#+END_SRC
** default shell
- counsel-projectile-find-file ÏàòÌñâÏãú fish shellÏÇ¨Ïö©Ìï†Îïå ascii error.
#+BEGIN_SRC emacs-lisp
(setq-default shell-file-name "/bin/zsh")
#+END_SRC
** org hyperlink when press enter
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC
** straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC
** rg
#+BEGIN_SRC emacs-lisp
  (use-package rg
  :ensure t)
#+END_SRC
* UI settings
** Basic Appearance settings
 #+begin_src emacs-lisp
   (setq inhibit-startup-message t)     
   (scroll-bar-mode -1)   
   (tool-bar-mode -1)     
   (tooltip-mode -1)      
   (set-fringe-mode 10)   
   (menu-bar-mode -1)     
   (setq visible-bell t)
 #+end_src

** UI theme
 #+BEGIN_SRC emacs-lisp

   (use-package doom-themes
     :init (load-theme 'doom-monokai-spectrum t)
     )
   (doom-themes-neotree-config)
   ;; this isn't necessary, because 'simple is the default
   (setq doom-neotree-file-icons 'simple)

 #+END_SRC
** modeline
 #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :ensure t)

      (use-package minions
        :hook (doom-modeline-mode . minions-mode))

      (use-package doom-modeline
        :ensure t
        :init (doom-modeline-mode 1)
        :custom-face
        ;; modeline font size
        (mode-line ((t (:height 1.05))))
        (mode-line-inactive ((t (:height 0.95))))
   ;;; add to $DOOMDIR/config.el
        (setq all-the-icons-scale-factor 1.1)
        :custom
        (doom-modeline-major-mode-icon t)
        (doom-modeline-project-detection 'auto)
        (doom-modeline-buffer-file-name-style 'auto)
        (doom-modeline-major-mode-color-icon t)
        (doom-modeline-buffer-state-icon t)
        (doom-modeline-minor-modes t)
        (doom-modeline-indent-info t)
        (doom-modeline-vcs-max-length 12)
        (doom-modeline-persp-name t)
        (doom-modeline-display-misc-in-all-mode-lines t)
        (doom-modeline-env-version t)
        (doom-modeline-display-default-persp-name nil)
        )

 #+END_SRC
** font settings
 #+BEGIN_SRC emacs-lisp

   (defun holy-daemon/set-font-faces ()		
     (message "Setting face on daemon")
     (set-face-attribute 'region nil :background "#834")
     (set-face-attribute 'default nil :font "Fira Code" :height 180)
     (dolist (charset '(hangul symbol cjk-misc ))
       (set-fontset-font (frame-parameter nil 'font) charset
                         (font-spec :family "D2Coding")))
     )
   (defun holy-client/set-font-faces ()		
     (message "Setting face on client")
     (set-face-attribute 'region nil :background "#834")
     (set-face-attribute 'default nil :font "Fira Code" :height 180)
     )
   ;; Ï∂îÍ∞Ä test
      ;; (when (display-graphic-p) 
      ;;   ;; Do any keybindings and theme setup here
      ;;   (progn
      ;;       (message "GUI!!")
      ;;       (add-hook 'after-make-frame-functions
      ;;           (lambda (frame)
      ;;             (setq doom-modeline-icon t)
      ;;             (with-selected-frame frame
      ;;               (holy-daemon/set-font-faces))))
      ;;   )
      ;;   (holy-client/set-font-faces))

   ;; daemonÏùºÎïåÎäî ÏàòÌñâÌïòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê Ïù¥Í≤ÉÏùÑ Ï£ºÏÑùÏ≤òÎ¶¨


   (if (daemonp)
       (progn
         (message "Daemon")
         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (setq doom-modeline-icon t)
                     (with-selected-frame frame
                       (holy-daemon/set-font-faces)))))
     (holy-client/set-font-faces))
 #+END_SRC
** Numbering Multiple window(ace window)
 #+BEGIN_SRC emacs-lisp
 (use-package ace-window
 :ensure t
 :init
 (progn
 (global-set-key [remap other-window] 'ace-window)
 (custom-set-faces
 '(aw-leading-char-face
 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
 ))
 #+END_SRC

** fill column
 #+BEGIN_SRC emacs-lisp
   (global-display-fill-column-indicator-mode 1)
   (setq-default display-fill-column-indicator-column 119)
 #+END_SRC

** pretty-symbols-mode
#+BEGIN_SRC emacs-lisp
(use-package pretty-symbols
  :ensure t)
#+END_SRC


** org bullet headings (org-superstar)
#+BEGIN_SRC emacs-lisp
    (use-package org-superstar
      :ensure t
      ;; :hook
      ;; (org-mode . (lambda () (org-superstar-mode 1)))
      )
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    (setq org-superstar-headline-bullets-list '("üÖê" "üÖë" "üÖí" "üÖì"  "üÖî"  "üÖï"  "üÖñ"))
    (setq org-superstar-special-todo-items t)
    (setq org-superstar-todo-bullet-alist '(("TODO" . ?‚ûΩ)
                                            ("CURRENTLY" . ?‚åõ)
                                            ("SOMEDAY" . ?‚è∞)
                                            ("CANCELLED" . ?‚úò)
                                            ("DONE" . ?‚úì)))
    (setq org-superstar-item-bullet-alist
          '((?* . ?‚Ä¢)
            (?+ . ?‚û§)
            (?- . ?‚Ä¢)))
    (setq org-ellipsis " ‚ñº ")

    ;; (load-file "~/.emacs.d/lisp/my-capture-template.el")
  (with-eval-after-load 'org
    (setq org-todo-keywords
          '((sequence "TODO" "DOING" "BLOCKED" "REVIEW" "|" "DONE" "ARCHIVED"))))
#+END_SRC
* emacs utitlity settings 
** lorem ipsum
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum
:config
(lorem-ipsum-use-default-bindings))
#+END_SRC

** ivy and counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


  (use-package counsel
    :ensure t
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :after counsel
    :init
    (ivy-rich-mode 1))

#+END_SRC
** neo tree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
      (setq neo-theme 'icons)
    ) 

  (global-set-key (kbd "C-c t") 'neotree-toggle)
#+END_SRC

** undo tree
undo treeÎ•º ÏÇ¨Ïö©Ìï†Îïå ~undo-tree~ÎùºÎäî Î∞±ÏóÖÌååÏùºÏù¥ Í≥ÑÏÜç ÏÉùÍ∏¥Îã§. Î≥ÑÎèÑÏùò Ìè¥ÎçîÎ°ú ÏòÆÍ∏∞Ïûê.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree-history")))
     (global-undo-tree-mode))

#+END_SRC
** highlight parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :hook
    ((prog-mode org-mode) . highlight-parentheses-mode)
    :init
    ;; (setq highlight-parentheses-colors '("green" "red" "red orange" ))
    
    (setq highlight-parentheses-colors '("#00e1ff" "red" "green" "blue" ))
    :custom-face
    ;; (highlight-parentheses-highlight ((t (:weight bold))))
    )

#+END_SRC

** gnuplot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
    :ensure t)
#+END_SRC

** plantuml
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config
    (setq org-plantuml-jar-path (expand-file-name "/Users/fregeholy/.emacs.d/lisp/plantuml/plantuml.jar"))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    )
#+END_SRC

** graphviz-dot
#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :init
    ;; (require 'company-graphviz-dot)
    :config
    (setq graphviz-dot-indent-width 4))
  ;; (use-package company-graphviz-dot
  ;;   )
#+END_SRC

** company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

;; global activation of the unicode symbol completion
(use-package company-math
  :ensure t
  :config
  (add-to-list 'company-backends 'company-math-symbols-unicode)
  )
;; (use-package company-graphviz-dot
;;   )

#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (message "Daemon projectile")
      (use-package projectile
        :diminish projectile-mode
        :config
        (projectile-mode +1)
        (setq projectile-enable-caching t)
        (setq projectile-indexing-method 'alien)
        :custom
        ((projectile-completion-system 'ivy))
        :bind-keymap
        ("C-c p" . projectile-command-map)
        :init
        (setq projectile-switch-project-action #'projectile-dired)
        (when (file-directory-p "/Users/fregeholy/Documents/Projects/")
          (setq projectile-project-search-path '("/Users/fregeholy/Documents/Projects/"))))


    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))
    )
#+END_SRC

** elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
	      ("q" . bjm/elfeed-save-db-and-bury)
	      ("Q" . bjm/elfeed-save-db-and-bury)
	      ("m" . elfeed-toggle-star)
	      ("M" . elfeed-toggle-star)
	      )
  )
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/Dropbox/shared/elfeed.org")))

#+END_SRC
** yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  ;; (add-to-list 'yas-snippet-dirs "~/Dropbox/WorkSpace/emacs/snippets")
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  :bind
  ("C-c s" . yas-insert-snippet)
  ("C-c n" . yas-new-snippet)
  ("C-c v" . yas-visit-snippet-file))
#+end_src

** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** transpose window
#+BEGIN_SRC emacs-lisp
    (use-package buffer-move
    :ensure t
    :config
    (global-set-key (kbd "<C-up>")     'buf-move-up)
    (global-set-key (kbd "<C-down>")   'buf-move-down)
    (global-set-key (kbd "<C-left>")   'buf-move-left)
    (global-set-key (kbd "<C-right>")  'buf-move-right)
    )
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (setq magit-branch-read-upstream-first 'fallback)

  (use-package forge
    :ensure t)

#+END_SRC
** gist
#+BEGIN_SRC emacs-lisp
  (use-package gist
  :ensure t)
#+END_SRC
** perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :bind
    (("C-x b" . persp-ivy-switch-buffer)         ; or use a nicer switcher, see below
     ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

** ein(emacs ipython notebook)
#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t
    :config
    (require 'ein-notebook))

#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+END_SRC
** gif-screen
#+BEGIN_SRC emacs-lisp
(use-package gif-screencast
  :ensure t
  :commands (gif-screencast-mode)
  :config
  (setq gif-screencast-scale-factor 2.0)
  (add-hook 'after-init-hook #'gif-screencast-mode)
  :bind ("C-x C-g" . 'gif-screencast-start-or-stop))

(with-eval-after-load 'gif-screencast
  (setq gif-screencast-args '("-x")) ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
  (setq gif-screencast-cropping-program "mogrify") ;; Optional: Used to crop the capture to the Emacs frame.
  (setq gif-screencast-capture-format "ppm")) ;; Optional: Required to crop captured images.


#+END_SRC
* Programming languages 
